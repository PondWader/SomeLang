DECLARE ENUM GenericType (
    TypeInt8,
	TypeInt16,
	TypeInt32,
	TypeInt64,
	TypeUint8,
	TypeUint16,
	TypeUint32,
	TypeUint64,
	TypeFloat32,
	TypeFloat64,
	TypeString,
	TypeBool,
	TypeMap,
	TypeFunc,
	TypeArray,
	TypeStruct,
	TypeStructInstance,
	TypeAny,

	TypeModule,

	TypeNil
)

DECLARE INTERFACE TypeDef:
	PUBLIC getGenericType() RETURNS GenericType
	PUBLIC equals(TypeDef) RETURNS boolean
	PUBLIC isInteger() RETURNS boolean
	PUBLIC isNumber() RETURNS boolean

DECLARE OBJECT GenericTypeDef IMPLEMENTS TypeDef:
    PUBLIC type: GenericType 
    constructor(genericType: GenericType):
        SET this.type TO genericType

    DECLARE PUBLIC METHOD getGenericType() RETURNS GenericType:
        RETURN this.type 

    DECLARE PUBLIC METHOD equals(other: TypeDef) RETURNS boolean:
        IF this.type IS GenericType.Any OR other.getGenericType() IS GenericType.Any THEN 
            RETURN true
        END IF
        RETURN this IS EQUAL TO (other AS GenericTypeDef)

    DECLARE PUBLIC METHOD isInteger() RETURNS boolean:
        SET genericType TO this.type 
	    RETURN genericType IS TypeInt8 OR genericType IS TypeInt16 OR genericType IS TypeInt32 OR genericType IS TypeInt64 OR genericType IS TypeUint8 OR genericType IS TypeUint16 OR genericType IS TypeUint32 OR genericType IS TypeUint64

	DECLARE PUBLIC METHOD isNumber() RETURNS boolean:
		SET genericType TO this.type 
		RETURN this.isInteger() OR genericType IS GenericType.Float32 OR genericType IS GenericType.Float64

DECLARE OBJECT FuncDef EXTENDS GenericTypeDef:
	PUBLIC args: TypeDef[]
	PUBLIC variadic: boolean 
	PUBLIC returnType: TypeDef 

	constructor(args: TypeDef[], variadic: boolean, returnType: TypeDef):
        CALL super(GenericType.Func)
		SET this.args TO args 
		SET this.variadic TO variadic 
		SET this.returnType TO returnType

	DECLARE PUBLIC METHOD equals(other: TypeDef) RETURNS boolean:
		IF other.getGenericType() IS GenericType.Any THEN 
			RETURN true
		END IF
		SET otherDef, ok TO other AS FuncDef 
		IF ok IS false OR length of this.args IS NOT length of otherDef.args THEN 
			RETURN false
		END IF
		START LOOP FOR i, argDef IN def.args
			IF otherDef.args[i].equals(argDef) THEN 
				RETURN false 
			END IF 
		END LOOP
		RETURN this.returnType.equals(otherDef.returnType)

DECLARE OBJECT MapDef EXTENDS GenericTypeDef:
	PUBLIC keyType: TypeDef 
	PUBLIC valueType: TypeDef 

	constructor(keyType: TypeDef, valueType: TypeDef):
        CALL super(GenericType.Map)
		SET this.keyType TO keyType 
		SET this.valueType TO valueType

	DECLARE PUBLIC METHOD equals(other typeType) RETURNS boolean:
		IF other.getGenericType() IS GenericType.Any THEN 
			RETURN true
		END IF
		SET otherDef, ok TO other AS MapDef 
		RETURN ok AND this.keyType.equals(otherDef.keyType) AND this.valueType.equals(otherDef.valueType)
	
DECLARE OBJECT ArrayDef EXTENDS GenericTypeDef:
	PUBLIC elementType: TypeDef 
	PUBLIC size: integer 

	constructor(elementType: TypeDef, size: integer):
        CALL super(GenericType.Array)
		SET this.elementType TO elementType 
		SET this.size TO size

	DECLARE PUBLIC METHOD equals(other: TypeDef) RETURNS boolean:
		IF other.getGenericType() IS GenericType.Any THEN
			RETURN true 
		END IF 
		SET otherDef, ok TO other AS ArrayDef 
		RETURN ok AND this.elementType.equals(otherDef.elementType)

DECLARE OBJECT StructDef EXTENDS GenericTypeDef:
	PUBLIC properties: map[string]integer 
	PUBLIC propertyDefs: TypeDef[]
	PUBLIC name: string 

	constructor(properties: map[string]integer, propertyDefs: TypeDef[], name: string):
        CALL super(GenericType.Struct)
		SET this.properties TO properties 
		SET this.propertyDefs TO propertyDefs
		SET this.name TO name

	DECLARE PUBLIC METHOD equals(other: TypeDef) RETURNS boolean:
		RETURN other.getGenericType() IS GenericType.Any 

DECLARE OBJECT ModuleDef EXTENDS GenericTypeDef:
	PUBLIC properties: map[string]TypeDef 

	constructor(properties: map[string]TypeDef):
        CALL super(GenericType.Module)
		SET this.properties TO properties

	DECLARE PUBLIC METHOD equals(other: TypeDef) RETURNS boolean:
		RETURN false

DECLARE OBJECT TypeEnvironment:
	PUBLIC identifiers: map[string]TypeDef
	PUBLIC returnType: TypeDef
	PUBLIC returned: boolean
	PUBLIC parent: TypeEnvironment
	PUBLIC Depth: integer

	constructor(parent: TypeEnvironment, returnType: TypeDef, depth: integer):
		SET this.parent TO parent 
		SET this.returnType TO returnType 
		SET this.depth TO depth 

	DECLARE PUBLIC newChild(returnType: TypeDef) RETURNS TypeEnvironment:
		RETURN new TypenEnvironment(this, returnType, this.depth + 1)

	DECLARE PUBLIC METHOD getReturnType() RETURNS TypeDef:
		IF this.returnType IS NOT null THEN 
			RETURN this.returnType 
		ELSE IF this.parent IS NOT null THEN 
			RETURN this.parent.getReturnType()
		END IF
		RETURN null 

	DECLARE PUBLIC METHOD getParent() RETURNS TypeEnvironment:
		RETURN this.parent 

	DECLARE PUBLIC METHOD get(name: string) RETURNS TypeDef, integer:
		RETURN this.getWithDepthCounter(name, 0)

	DECLARE PUBLIC METHOD getWithDepthCounter(name: string, depth: integer) RETURNS TypeDef, integer:
		SET val, ok TO this.identifiers[name]
		IF ok IS true THEN 
			RETURN val, depth 
		END IF 
		IF this.parent IS NOT null THEN 
			RETURN this.parent.getWithDepthCounter(name, depth + 1)
		END IF
		RETURN null, -1

	DECLARE PUBLIC METHOD set(name: string, value: TypeDef):
		SET this.identifiers[name] TO value 

	DECLARE PUBLIC METHOD getReturned() RETURNS boolean:
		RETURN this.returned 

	DECLARE PUBLIC METHOD setReturned():
		SET this.returned TO true